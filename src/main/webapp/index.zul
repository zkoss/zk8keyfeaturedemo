<zk xmlns:n="native" xmlns:ca="client/attribute" xmlns:w="client">
<?link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"?>
<?link rel="stylesheet" type="text/css" href="https://cdn.rawgit.com/codemirror/CodeMirror/master/lib/codemirror.css"?>
	<n:h2>Control Bootstrap/HTML Layout in Java</n:h2>
	<div>
		Using ZK 8’s UI Templating, you can easily apply a predesigned HTML layout or a Bootstrap template and enliven it in Java.
	</div>
	<hlayout>
		<div class="well" hflex="3" vflex="1">
			<iframe src="/keyfeature1/index.zul" width="100%" height="600px"/>
		</div>
		<tabbox hflex="2" vflex="1">
			<tabs id="tabs">
				<tab label="statBoxTemplate.zul" />
				<tab label="index.zul" />
			</tabs>
			<tabpanels>
				<tabpanel renderdefer="100" >
					<vlayout vflex="1" hflex="1">
						<label
							value="the statBoxTemplate.zul file will be used as the structure for each stat box, based on the box values" />
						<textbox ca:data-codeMirror="true" 
							multiline="true">
							<attribute name="value"><![CDATA[<!-- has 2 parameters statBlock and detailCommand -->
<h:div class="col-md-3 col-sm-6" xmlns:h="native">
	<h:div class="widget widget-stats bg-${statBlock.style}">
		<h:div class="stats-icon">
			<h:i class="fa ${statBlock.icon}" />
		</h:div>
		<h:div class="stats-info">
			<h:h4>${statBlock.title}</h:h4>
			<h:p>${statBlock.value}</h:p>
		</h:div>
		<h:div class="stats-link">
			<a onClick="@command(detailCommand,statId=statBlock.id)">
				View Detail
				<h:i class="fa fa-arrow-circle-o-right" />
			</a>
		</h:div>
	</h:div>
</h:div>]]></attribute>
						</textbox>
					</vlayout>
				</tabpanel>
				<tabpanel>
					<vlayout>
						<label
							value="Defining the statbox element and using it in the main index.zul file" />
						<textbox ca:data-codeMirror="true" rows="10"
							multiline="true">
							<attribute name="value"><![CDATA[<?component name="statBox" templateURI="statBoxTemplate.zul"?>

...

<forEach items="@init(vm.myStats)">
	<statBox statBlock="@init(each)" 
		detailCommand="@init(MyViewModel.VIEW_DETAIL)"/>
</forEach> ]]></attribute>
						</textbox>
					</vlayout>
				</tabpanel>
			</tabpanels>
		</tabbox>
	</hlayout>
	<separator bar="true" />
	<n:h2>Clear View/Logic Separation</n:h2>
	<div>ZK 8’s MVVM pattern cleanly separates view and logic, allowing representation of the same data structure with varying detail, layout or even functionality. </div>
	<div class="well">
		<iframe src="/keyfeature2/new/index.zul" width="1000px" height="900px" />
	</div>
	<separator bar="true" />
	<n:h2>
		Easily Integrate Third-Party Javascript Libraries
	</n:h2>
	<div>
		By using ZK 8's Data-handler, you can conveniently incorporate many third-party Javascript libraries.

	</div>
	<div class="well">
		<iframe src="/keyfeature3/index.zul" width="650px" height="300px"/>
	</div>
	
	<separator bar="true" />
	
	<n:h2>More Dynamic UIs in MVVM with Client Binding</n:h2>
    <div>
		In this example, we used ZK 8’s Client Binding to render data on demand in a “seamlessly” scrollable view. The principle of View/Logic separation is preserved; while the ViewModel provides the data, the client-side JS handles the positioning and scrolling.

	</div>
	<div class="well">
		<iframe src="/keyfeature4/rod-shadow.zul" width="600px" height="700px" />
	</div>
</zk>