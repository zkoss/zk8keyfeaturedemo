<zk xmlns:n="native" xmlns:ca="client/attribute" xmlns:w="client">
<?link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"?>
<?link rel="stylesheet" type="text/css" href="https://cdn.rawgit.com/codemirror/CodeMirror/master/lib/codemirror.css"?>
<style src="/keyfeature3/scripts/bootstrap/bootstrap.min.css" />
<script src="/keyfeature3/scripts/bootstrap/bootstrap.min.js" />
<script defer="true">
	jq('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
	  var target = jq(e.target).attr("href");
	  jq(target + ' .CodeMirror').each(function (i, el) {
    	el.CodeMirror.refresh();
      });
	});
</script>
	<n:h2>Control Bootstrap/HTML Layout in Java</n:h2>
	<div>
		Using ZK 8’s UI Templating, you can easily apply a predesigned HTML layout or a Bootstrap template and enliven it in Java.

[bubble]This demo shows how part of a popular WrapBootstrap Admin template was taken and applied as a dynamic ZK page.
	</div>
	<hlayout>
		<div class="well" hflex="3" vflex="1">
			<iframe src="/keyfeature1/index.zul" width="100%" height="600px"/>
		</div>
		<tabbox hflex="2" vflex="1">
			<tabs id="tabs">
				<tab label="statBoxTemplate.zul" />
				<tab label="index.zul" />
			</tabs>
			<tabpanels>
				<tabpanel renderdefer="100" >
					<vlayout vflex="1" hflex="1">
						<label
							value="the statBoxTemplate.zul file will be used as the structure for each stat box, based on the box values" />
						<textbox ca:data-codeMirror="true" 
							multiline="true">
							<attribute name="value"><![CDATA[<!-- has 2 parameters statBlock and detailCommand -->
<h:div class="col-md-3 col-sm-6" xmlns:h="native">
	<h:div class="widget widget-stats bg-${statBlock.style}">
		<h:div class="stats-icon">
			<h:i class="fa ${statBlock.icon}" />
		</h:div>
		<h:div class="stats-info">
			<h:h4>${statBlock.title}</h:h4>
			<h:p>${statBlock.value}</h:p>
		</h:div>
		<h:div class="stats-link">
			<a onClick="@command(detailCommand,statId=statBlock.id)">
				View Detail
				<h:i class="fa fa-arrow-circle-o-right" />
			</a>
		</h:div>
	</h:div>
</h:div>]]></attribute>
						</textbox>
					</vlayout>
				</tabpanel>
				<tabpanel>
					<vlayout>
						<label
							value="Defining the statbox element and using it in the main index.zul file" />
						<textbox ca:data-codeMirror="true" rows="10"
							multiline="true">
							<attribute name="value"><![CDATA[<?component name="statBox" templateURI="statBoxTemplate.zul"?>

...

<forEach items="@init(vm.myStats)">
	<statBox statBlock="@init(each)" 
		detailCommand="@init(MyViewModel.VIEW_DETAIL)"/>
</forEach> ]]></attribute>
						</textbox>
					</vlayout>
				</tabpanel>
			</tabpanels>
		</tabbox>
	</hlayout>
	<separator bar="true" />
	<n:h2>Clear View/Logic Separation</n:h2>
	<div>ZK 8’s MVVM pattern cleanly separates view and logic, allowing representation of the same data structure with varying detail, layout or even functionality. </div>
	<div class="well">
		<iframe src="/keyfeature2/new/index.zul" width="1000px" height="900px" />
	</div>
	<separator bar="true" />
	<n:h2>
		Easily Integrate Third-Party Javascript Libraries
	</n:h2>
	<div>
		By using ZK 8's Data-handler, you can conveniently incorporate many third-party Javascript libraries.

	</div>
	<hlayout>
		<div class="well">
			<iframe src="/keyfeature3/index.zul" width="650px"
				height="300px" />
		</div>
		<window>
			<n:div>
				<n:ul class="nav nav-tabs">
					<n:li class="active">
						<n:a href="#chartist" data-toggle="tab">
							chartist
						</n:a>
					</n:li>
					<n:li>
						<n:a href="#labelauty" aria-controls="labelauty"
							role="tab" data-toggle="tab">
							labelauty
						</n:a>
					</n:li>
					<n:li>
						<n:a href="#highlight" aria-controls="highlight"
							role="tab" data-toggle="tab">
							highlight
						</n:a>
					</n:li>
					<n:li>
						<n:a href="#markdown" aria-controls="markdown"
							role="tab" data-toggle="tab">
							markdown
						</n:a>
					</n:li>
					<n:li>
						<n:a href="#mask" aria-controls="mask"
							role="tab" data-toggle="tab">
							mask
						</n:a>
					</n:li>
				</n:ul>


				<n:div class="tab-content">
					<n:div class="tab-pane active" id="chartist">
						<vlayout>
							<label
								value="in the zul file" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<label value="@load(vm.chartist_percentage)" 
			ca:data-chartist-pie='{"width": "100", "height": "100", "total": "100"}' />]]></attribute>
							</textbox>
							<label
								value="in zk.xml" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<data-handler>
	<name>chartist-pie</name>
    <link rel="stylesheet" href="/keyfeature3/scripts/chartist/chartist.min.css"/>
    <script src="/keyfeature3/scripts/chartist/chartist.min.js"></script>
	<script>
		function (wgt, dataValue) {
			var value = wgt.getValue();
			wgt.setValue('');
			var node = jq(wgt.$n());
			new Chartist.Pie(node[0], {series: [parseFloat(value)], labels: [value]}, dataValue);
			wgt.setOverride("setValue", function(value) {
				this.$setValue('');
				new Chartist.Pie(node[0], {series: [parseFloat(value)], labels: [value]}, dataValue);
			});
		}
	</script>
</data-handler>]]></attribute>
							</textbox>
						</vlayout>
					</n:div>
					<n:div class="tab-pane" id="labelauty">
						<vlayout>
							<label
								value="in the zul file" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<checkbox checked="@bind(vm.zk)"
        ca:data-labelauty='{"checked_label": "I am skilled at ZK", "unchecked_label": "I am still learning ZK", "minimum_width": "100px"}' />]]></attribute>
							</textbox>
							<label
								value="in zk.xml" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<data-handler>
	<name>labelauty</name>
	<link href="/keyfeature3/scripts/auty/jquery-labelauty.css" rel="stylesheet" />
	<script src="/keyfeature3/scripts/auty/jquery-labelauty.js"/>
	<script>
		function (wgt, dataValue) {
			jq(wgt._subnodes.real).labelauty(dataValue);
		}
	</script>
</data-handler>]]></attribute>
							</textbox>
						</vlayout>
					</n:div>
					<n:div class="tab-pane" id="highlight">
						<vlayout>
							<label
								value="in the zul file" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<n:pre style="margin: 0px">
	<label ca:data-syntax-highlight="{useBR: true}"
		value="@load(vm.syntax)" />
</n:pre>]]></attribute>
							</textbox>
							<label
								value="in zk.xml" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<data-handler>
	<name>syntax-highlight</name>
	<link href="/keyfeature3/scripts/hightlights/default.min.css" rel="stylesheet" />
	<script src="/keyfeature3/scripts/hightlights/highlight.min.js"/>
	<script>
		function (wgt, dataValue) {
			hljs.configure(dataValue);
			jq(wgt.$n()).each(function(i, block) {
			    hljs.highlightBlock(block);
			});
			wgt.setOverride("setValue", function(dataValue) {
				this.$setValue(dataValue);
				jq(wgt.$n()).each(function(i, block) {
				    hljs.highlightBlock(block);
				});
			});
		}
	</script>
</data-handler>]]></attribute>
							</textbox>
						</vlayout>
					</n:div>
					<n:div class="tab-pane" id="markdown">
						<vlayout>
							<label
								value="in the zul file" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<label ca:data-markdown="true" multiline="true" value="@load(vm.markdown)" />]]></attribute>
							</textbox>
							<label
								value="in zk.xml" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<data-handler>
	<name>markdown</name>
	<script src="/keyfeature3/scripts/markdown/showdown.min.js"/>
	<script>
		function (wgt, dataValue) {
			var converter = new showdown.Converter();
			wgt.$n().innerHTML = converter.makeHtml(wgt.getValue());
			wgt.setOverride("setValue", function(value) {
				this.$setValue(value);
				this.$n().innerHTML = converter.makeHtml(value);
			});
		}
	</script>
</data-handler>]]></attribute>
							</textbox>
						</vlayout>
					</n:div>
					<n:div class="tab-pane" id="mask">
						<vlayout>
							<label
								value="in the zul file" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<textbox ca:data-mask="99:99:99.99" value="21143513" />]]></attribute>
							</textbox>
							<label
								value="in zk.xml" />
							<textbox ca:data-codeMirror="true"
								multiline="true">
<attribute name="value"><![CDATA[<data-handler>
	<name>mask</name>
	<script src="/keyfeature3/scripts/mask/jquery.mask.min.js"/>
	<script>
		function (wgt, dataValue) {
			jq(wgt.$n()).mask(dataValue);
			wgt.listen({onChange: function (event) {
				event.data.value = jq(this.$n()).cleanVal();
			}});
		}
	</script>
</data-handler>]]></attribute>
							</textbox>
						</vlayout>
					</n:div>
				</n:div>
			</n:div>
		</window>
	</hlayout>

	<separator bar="true" />
	
	<n:h2>Seamless Client-Server Messaging with MVVM Client Binding</n:h2>
    <div>
        Client binding allows us to trigger commands on the server-side and register callbacks on the client-side to ensure effective communication, empowering even AngularJS/ReactJS with Java.

		[bubble]In this example, we used ZK 8’s Client Binding to render data on demand in a “seamlessly” scrollable view. The principle of View/Logic separation is preserved; while the ViewModel provides the data, the client-side JS handles the positioning and scrolling.

	</div>
	<div class="well">
		<iframe src="/keyfeature4/rod-shadow.zul" width="100%" height="700px" />
	</div>
</zk>