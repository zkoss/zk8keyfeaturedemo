<zk xmlns:x="xhtml" xmlns:n="native" xmlns:w="client" xmlns:sh="shadow">
<?link rel="stylesheet" type="text/css" href="/resources/css/bootstrap.min.css" ?>
<?script src="/resources/js/bootstrap.min.js" ?>
<?link rel="stylesheet" type="text/css" href="/resources/css/demo.css"?>
<?link rel="stylesheet" type="text/css" href="/resources/css/demo-tooltips.css"?>
<?link rel="stylesheet" type="text/css" href="/resources/css/demo-codemirror.css"?>
<?link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400,700" ?>
<?link rel="stylesheet" type="text/css" href="http://cdn.jsdelivr.net/font-hack/2.013/css/hack.min.css" ?>
	<div>
		<n:div class="top-header">
			<n:div class="logo">
				<n:a href="http://www.zkoss.org"></n:a>
			</n:div>
		</n:div>
		<n:div class="demo-header">
			<n:div class="text-content">
				<n:h2>Harvest JavaScript From Java Roots</n:h2>
				<n:p>Stay true to your Java roots and effortlessly keep up with front-end innovations.</n:p>
				<n:div>
					<n:a class="button learn-more" href="http://www.zkoss.org/product/zk/zk8">Learn More</n:a>
					<n:a class="button download" href="http://www.zkoss.org/download/zk?zk8">Download</n:a>
				</n:div>
			</n:div>
		</n:div>

		<sh:apply template="demoSection" 
				sectionStyle="demo-section demo-section-light-blue" 
				title="Control Bootstrap/HTML Layout in Java"
				contentURI="feature1.zul"
				learnMoreLink="#">
			<template name="description">
				<n:p>Using ZK 8's UI Templating, you can easily apply a predesigned layout or a Bootstrap template and enliven it in Java.</n:p>
			</template>
			<template name="tooltip">
				<n:p>This demo shows how part of a popular WrapBootstrap Admin template was taken and applied as a dynamic ZK Page.</n:p>
			</template>
		</sh:apply>

		<sh:apply template="demoSection"
				sectionStyle="demo-section demo-section-white" 
				title="Clear View/Logic Separation"
				contentURI="feature2.zul"
				learnMoreLink="#">
			<template name="description">
				<n:p>ZK 8's MVVM pattern cleanly separates view and logic, allowing representation of the same data structure with varying detail, layout and even functionality.</n:p>
			</template>
			<template name="tooltip">
				<n:p>Choose a template to render the view in different ways</n:p>
			</template>
		</sh:apply>

		<sh:apply template="demoSection"
				sectionStyle="demo-section demo-section-blue" 
				title="Easily Integrate Third-Party Javascript Libraries"
				contentURI="feature3.zul"
				learnMoreLink="#">
			<template name="description">
				<n:p>By using ZK 8's Data-handler, you can conveniently incorporate many third-party Javascript libraries.</n:p>
			</template>
			<template name="tooltip">
				<n:p>tooltip</n:p>
			</template>
		</sh:apply>

   		<sh:apply template="demoSection" 
				sectionStyle="demo-section demo-section-white" 
				title="Seamless Client-Server Messaging with MVVM Client Binding"
				contentURI="feature4.zul"
				learnMoreLink="#">
			<template name="description">
				<n:p>ZK 8's Client binding allows you to trigger commands on the server-side and register callbacks on the client-side, ensuring effective communication and empowering even AngularJS/ReactJS with Java.</n:p>
			</template>
			<template name="tooltip">
				<n:p>In this example, we used ZK 8’s Client Binding to render data on demand in a “seamlessly” scrollable view.</n:p>
				<n:p>The principle of View/Logic separation is preserved; while the ViewModel provides the data, the client-side JS handles the positioning and scrolling.</n:p>
			</template>
		</sh:apply>

		<n:div class="demo-footer">
			<n:div class="text-content">
				<n:p>Cultivate with ZK 8 now!</n:p>
				<n:div>
					<n:a class="button learn-more" href="http://www.zkoss.org/product/zk/zk8">Learn More</n:a>
					<n:a class="button download" href="http://www.zkoss.org/download/zk?zk8">Download</n:a>
					<n:a class="button demo" href="http://www.zkoss.org/zkdemo/">View All Demos</n:a>
				</n:div>
			</n:div>
		</n:div>

		<template name="demoSection">
			<n:section class="${sectionStyle}">
				<n:div class="section-content">
					<n:div class="text-content">
						<n:h2>${title}</n:h2>
						<sh:apply template="description"/>
					</n:div>
					<n:div class="demo-content">
						<n:div class="tooltip-content">
							<sh:apply template="tooltip"/>
						</n:div>
						<sh:apply templateURI="${contentURI}"/>
					</n:div>
				</n:div>
			</n:section>
		</template>

		<template name="tooltipToggle">
			<n:div class="tooltip-anchor" style="${offsetStyle}">
				<div zclass="tooltip-toggle" 
					w:onBind="
						var tooltipContent = jq(this).closest('.demo-content').find('.tooltip-content')[0];
						jq(this).popover({
							placement: 'top', 
							content: tooltipContent.innerHTML,
							trigger: 'manual',
							html: true,
							container: 'body'
						});
						jq(tooltipContent).remove();"
					w:onClick="jq(this).popover('show');"/>
			</n:div>
		</template>
		<script defer="true"><![CDATA[
			$(document).on('click', function(evt) {
				if(!jq(evt.target).hasClass('tooltip-toggle')) {
					jq('.tooltip-toggle').popover('hide');
				}
			});
			function calculateHeaderHeight() {
				var $headerContent = jq('.demo-header .text-content');
				var $topBanner = jq('.top-header');
				var body = jq('body');
				var paddingTop = zk.parseInt($headerContent.css('padding-top'));
				var paddingBottom = zk.parseInt($headerContent.css('padding-bottom'));
				var innerHeight = $headerContent.innerHeight() - paddingTop - paddingBottom;
				var padding = body.height() - $topBanner.outerHeight(true) - innerHeight - paddingTop;
				if (body[0].scrollWidth > body.width()) {
					padding += jq.scrollbarWidth();
				}
				$headerContent.css('padding-bottom', (padding < 0 ? 0 : padding) + 'px');
			}
			calculateHeaderHeight();
			jq(window).resize(function() {
				calculateHeaderHeight();
			});
		]]></script>
	</div>
</zk>