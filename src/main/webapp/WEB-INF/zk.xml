<?xml version="1.0" encoding="UTF-8"?>

<zk>
	<client-config>
		<data-handler>
			<name>slimscroll</name>
			<script src="/keyfeature1/scripts/jquery.slimscroll.min.js"/>
			<script>
				function(wgt, dataValue) {
					myScrollDiv = wgt.$n();
					myScrollable = jq(myScrollDiv);
					myScrollable.slimScroll(dataValue);
				 	if(dataValue.scrollToEnd){
			            var binder = zkbind.$(myScrollDiv);
			            binder.after(dataValue.scrollToEnd, function() {
							myScrollable.slimScroll({ scrollBy: myScrollDiv.scrollHeight });
			            });
		            }					
				}
			</script>
		</data-handler>
		<data-handler>
			<name>labelauty</name>
			<link href="/keyfeature3/scripts/auty/jquery-labelauty.css" rel="stylesheet" />
			<script src="/keyfeature3/scripts/auty/jquery-labelauty.js"/>
			<script>
				function (wgt, dataValue) {
					jq(wgt._subnodes.real).labelauty(dataValue);
				}
			</script>
		</data-handler>
		<data-handler>
			<name>syntax-highlight</name>
			<link href="/keyfeature3/scripts/hightlights/default.min.css" rel="stylesheet" />
			<script src="/keyfeature3/scripts/hightlights/highlight.min.js"/>
			<script>
				function (wgt, dataValue) {
					hljs.configure(dataValue);
					jq(wgt.$n()).each(function(i, block) {
					    hljs.highlightBlock(block);
					});
					wgt.setOverride("setValue", function(dataValue) {
						this.$setValue(dataValue);
						jq(wgt.$n()).each(function(i, block) {
						    hljs.highlightBlock(block);
						});
					});
				}
			</script>
		</data-handler>
		<data-handler>
			<name>markdown</name>
			<script src="/keyfeature3/scripts/markdown/showdown.min.js"/>
			<script>
				function (wgt, dataValue) {
					var converter = new showdown.Converter();
					wgt.$n().innerHTML = converter.makeHtml(wgt.getValue());
					wgt.setOverride("setValue", function(value) {
						this.$setValue(value);
						this.$n().innerHTML = converter.makeHtml(value);
					});
				}
			</script>
		</data-handler>
		<data-handler>
			<name>mask</name>
			<script src="/keyfeature3/scripts/mask/jquery.mask.min.js"/>
			<script>
				function (wgt, dataValue) {
					jq(wgt.$n()).mask(dataValue);
					wgt.listen({onChange: function (event) {
						event.data.value = jq(this.$n()).cleanVal();
					}});
				}
			</script>
		</data-handler>
		<data-handler>
			<name>chartist-pie</name>
		    <link rel="stylesheet" href="/keyfeature3/scripts/chartist/chartist.min.css"/>
		    <script src="/keyfeature3/scripts/chartist/chartist.min.js"></script>
			<script>
				function (wgt, dataValue) {
					var value = wgt.getValue();
					wgt.setValue('');
					var node = jq(wgt.$n());
					new Chartist.Pie(node[0], {series: [parseFloat(value)], labels: [value]}, dataValue);
					wgt.setOverride("setValue", function(value) {
						this.$setValue('');
						new Chartist.Pie(node[0], {series: [parseFloat(value)], labels: [value]}, dataValue);
					});
				}
			</script>
		</data-handler>
		<data-handler>
			<name>easypiechart</name>
			<script src="/keyfeature3/scripts/easypiechart/jquery.easy-pie-chart.js"/>
			<script>
				function (wgt, dataValue) {
					var configuration = dataValue.length > 0 ? $.evalJSON(dataValue) : {},
						$w = jq(wgt.$n()),
						size = $w.data('size'),
						label = $w.find('span'),
						defaultConfig = { //Change the text by step (Animation)
							onStep: function(value) {
								label.text(~~value + '%');
							},
							onStop: function(from, to) {
								label.text(~~to + '%');
							}
						};
				
					$.extend(configuration, defaultConfig, size ? {size: size} : {});
					$w.easyPieChart(configuration);
				
					var self = this;
					if (self.after) {
						self.after('$clientUpdate', function (evt) {
							if (evt != null)
								$w.data('easyPieChart').update(evt);
						});
					}
				}
			</script>
		</data-handler>
	    <data-handler>
			<name>codeMirror</name>
            <script src="https://cdn.rawgit.com/codemirror/CodeMirror/master/lib/codemirror.js"/>
       		<script src="https://cdn.rawgit.com/codemirror/CodeMirror/master/mode/xml/xml.js"/>
            <script>
            function(wgt, dataValue) {
            		var myTextArea = wgt.$n();
					editor = CodeMirror.fromTextArea(myTextArea, 
						{lineNumbers: true, mode: "xml", textWrapping: true, readOnly:true}
					);
					editor.setSize("auto","auto");
			}
   			 </script>
	    </data-handler>
	</client-config>
</zk>
